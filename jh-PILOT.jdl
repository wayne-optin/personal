/**
 * JHipster JDL model for the NWIC experiment
 * @author wstidolph 2019/06/17 v 0.1
 */
 application {
 	config {
 		baseName uaa,
		packageName com.optin.core
 		applicationType uaa,
 		authenticationType uaa,
 		uaaBaseName "uaa",
 		prodDatabaseType postgresql,
 	}
 }
 // adding hazelcast to ui - shouldn't need but get javax.cache not found errs in build
 application {
  config {
    baseName ui,
    packageName com.optin.nwic,
    applicationType gateway,
    serverPort 8080,
    prodDatabaseType postgresql,
    cacheProvider hazelcast,
    authenticationType uaa,
    uaaBaseName "uaa",
    serviceDiscoveryType eureka
    useSass true
    testFrameworks [protractor]
    websocket spring-websocket
    messageBroker kafka
  }
  entities *
}

// one big "microservice" for the domain to simplify debugging, break up later (maybe)
application {
  config {
    baseName domain,
    packageName com.optin.nwic,
    applicationType microservice,
    serverPort 8081
    prodDatabaseType postgresql,
    cacheProvider hazelcast,
    authenticationType uaa,
    uaaBaseName "uaa",
    serviceDiscoveryType eureka
    searchEngine elasticsearch
    testFrameworks [gatling,cucumber]
    skipUserManagement true
    messageBroker kafka
  }
  entities Employer, Worker, TimeWindow,
           CommsCmd, CommsTemplate, ContactInfo, ContactLogEntry,
           Job, JobWorkerSkillMatch, JobAssignment, JobShift, JobSite, JobSkill,
           JobSummary, JobSkillSummary,
           Phone, Address
}

microservice Employer, Worker, TimeWindow,
           Job, JobWorkerSkillMatch, JobAssignment, JobShift, JobSite, JobSkill
           with domain

search Worker, Job, JobSkill, JobAssignment with elasticsearch

application {
  config {
    baseName integration,
    packageName com.optin.core
    applicationType microservice 
    serverPort 8082
    prodDatabaseType postgresql,
    cacheProvider hazelcast
    authenticationType uaa,
    uaaBaseName "uaa",
    serviceDiscoveryType eureka
    testFrameworks [gatling]
    skipUserManagement true
    messageBroker kafka
  }
  entities ExternalCmd, CommsCmd, CommsTemplate
}

microservice ExternalCmd with integration

application {
  config {
    baseName comms
    packageName com.optin.core
    applicationType microservice
    serverPort 8083,
    prodDatabaseType postgresql
    cacheProvider hazelcast
    authenticationType uaa
    uaaBaseName "uaa"
    serviceDiscoveryType eureka
    testFrameworks [gatling]
    skipUserManagement true
    messageBroker kafka
  }
  entities CommsCmd, CommsTemplate, CommsProvider, CommsChannelConfig, ContactInfo, ContactLogEntry, Address, Phone
}

microservice CommsCmd, CommsProvider, CommsChannelConfig, CommsTemplate, ContactInfo, ContactLogEntry with comms

application {
  config {
    baseName onboarding,
    packageName com.optin.nwic
    applicationType microservice
    serverPort 8084
    prodDatabaseType postgresql
    cacheProvider hazelcast
    authenticationType uaa
    uaaBaseName "uaa"
    serviceDiscoveryType eureka
    testFrameworks [gatling]
    skipUserManagement true
    messageBroker kafka
  }
  entities Candidate, JobSummary, JobSkillSummary, ContactInfo, ContactLogEntry, Phone, Address
}
microservice Candidate, JobSummary, JobSkillSummary with onboarding

// istio changes in JH 6, just set istio true (online docs are wrong)

deployment {
  deploymentType kubernetes
  appsFolders [ui, domain, onboarding, comms, integration, uaa]
  dockerRepositoryName "optindev"  // pw g3t0pt1n1
  serviceDiscoveryType eureka
  istio true
  kubernetesServiceType Ingress
  kubernetesNamespace nwic-pilot
//  ingressDomain "35.239.46.241.nip.io" // the gcloud extern ip for nwic-pilot cluster
  ingressDomain "localhost" // because I want to run a local istio cluster for dev
}

// good for local test
deployment {
  deploymentType docker-compose
  appsFolders [ui, domain, onboarding, comms, integration, uaa]
  dockerRepositoryName "optindev"
  monitoring elk
  consoleOptions [zipkin]
}

// use a serviceClass for all the entities; slower but we'll want control/logging
service * with serviceClass

// use DTO to disconnect REST layer from the services
dto * with mapstruct

// paginate everything, for cconsistency
paginate * with pagination

// enable query filtering for all the entities
filter *

// entity definitions here

/** Entity ExternCmd (experimental)
* upload service experiment - can we treat external integrations as entities
*/
entity ExternalCmd {
  content TextBlob required 
  rcd ZonedDateTime
  status ExternalCmdStatus
  result TextBlob
}

enum ExternalCmdStatus {
  RCD, REJ, INPROC, FAILED, COMPLETE
}

/**
 * Entity Employer aka Client
 * denormalized a bunch of data just for view model simplicity
 */
entity Employer {
  name String
  isSubbusiness Boolean
  notes String
  address1 String
  address2 String
  cityTown String
  state StateAbbrev
  zipcode Integer
  principalNameFirst String
  principalNameLast String
  principlePhoneOffice String
  principlePhoneMobile String
  principlePhoneFax String
  principalEmail  String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
  hasBackupContact Boolean
  backupNameFirst String
  backupNameLast String
  backupPhoneOffice String
  backupPhoneMobile String
  backupePhoneFax String
  backupEmail  String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
}
relationship ManyToOne {
  Employer{superbusiness} to Employer
}

/**
* Entity Candidate
*/
entity Candidate {
  nameFirst String 
  nameLast String required
  nameNick String
  active Boolean
  status WorkerStatus
  recruiter Boolean
  notes String
  owner String
  sourcedFrom SourcedFrom
  workerType WorkerType
  // some denormalized fields
  emailPrimary String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
  phonePrimary String
  phonePrimaryType PhoneType
  availStart LocalDate
  availEnd LocalDate
}

entity JobSummary {
  jobName String required
  clientName String
  startDate LocalDate
  endDate LocalDate
  workerRating Integer
  employerSatisfied Boolean
}

relationship OneToMany {
  Candidate{jobs} to JobSummary
  JobSummary{skills} to JobSkillSummary
}

/**
 * Entity Worker
 */
entity Worker { 
  nameFirst String 
  nameLast String required
  nameNick String
  active Boolean
  status WorkerStatus
  recruiter Boolean
  notes String
  owner String
  sourcedFrom SourcedFrom
  workerType WorkerType
  // some denormalized fields
  emailPrimary String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
  phonePrimary String
  phonePrimaryType PhoneType
  availStart LocalDate
  availEnd LocalDate
}

enum WorkerStatus {
  ALL, PENDING, APPROVED, DO_NOT_STAFF
}
enum WorkerType {
  REGULAR, DAY_LABORER
//	CANDIDATE, CONTACT, OTHER, HIRING_AUTH, CONTACT_HIRING_AUTH, CONTACT_OTHER, RECRUITER
}
enum SourcedFrom {
  DO_NOT_STAFF, WORKING, HIRED, WALKS_OFF_JOB, PHONE_DISC, MOVED_OUT_OF_STATE, NO_SHOW_ALL_WEEK, NO_ENGLISH, FOUND_JOB, APPLIED
}

relationship OneToOne {
  ContactInfo{addrHome} to Address
  JobShift to TimeWindow
  Worker{currentJob} to JobAssignment{worker}
}

relationship OneToMany {
  Worker{jobHistory} to JobAssignment
  Worker{avail} to TimeWindow
  Worker{jobworkermatches} to JobWorkerSkillMatch
  Job{jobworkermatches} to JobWorkerSkillMatch
  Job{shifts} to JobShift{job}
  JobShift{assigned} to JobAssignment{jobShift}
  JobSite{jobs} to Job{site}
  Employer{defSkills} to JobSkill{definedBy}
}

relationship ManyToOne {
  Worker{employer} to Employer{employee}
}

relationship ManyToMany {
  Worker{hasJobSkill} to JobSkill{skilledWorker}
  Worker{wantsJobSkill} to JobSkill{trainableWorker}
  Job{reqSkill} to JobSkill{reqFor}
}

enum JobWorkerSkillMatchBasis {
  SKILL_MATCH, EMPLOYER_MANUAL, SCHEDULER_MANUAL
}
enum JobWorkerSkillMatchMechanism {
  SMSVC_ALL, SMSVC_CRIT
}
entity JobWorkerSkillMatch {
  whyMatched JobWorkerSkillMatchBasis
  howMatched JobWorkerSkillMatchMechanism
  whenMatched ZonedDateTime
  matchComments TextBlob
  matchQuality Float
  isActive Boolean
}

// JOB related
entity Job { 
  jobName String required
  clientName String
  startDate LocalDate
  endDate LocalDate
  status JobStatus
  workersNeeded Integer
  workersShort Integer
  jobContact String
  jobPhone String
  jobCity String
  jobState StateAbbrev
}

// resuable Job-related entities
entity JobSite {
  jobName String
  jobCity String
  jobState StateAbbrev
  clientName String
}

entity JobSkill {
  category String
  skillName String
  isBool Boolean
  level Integer
  isLevelMin Boolean
  isLevelMax Boolean
  monthsExp Integer
}

entity JobSkillSummary {
  category String
  skillName String
  isBool Boolean
  level Integer
  isLevelMin Boolean
  isLevelMax Boolean
  monthsExp Integer
}

enum JobStatus {
  OPEN, FILLED, CLOSED, CANCELED
}

/**
 * entity JobAssignment
 * similar to Slot in domain model
 */
entity JobAssignment {
  clientNickname String
  startDate LocalDate
  endDate LocalDate
  notes String
  numMissedDays Integer
  workerRating Integer
  employerSatisfied Boolean
}

entity JobShift {
  shiftName String required
  numWorkersReq Integer
  numWorkersShort Integer
}

// COMMS
enum PhoneType {
  VOICE, TEXT, SMART
}
entity Phone {
	num String required
	type PhoneType
}
entity ContactInfo {
  date LocalDate // as-of date of contact info
  emailPrimary String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
  emailWork String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
  emailHome String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
  emailOther String pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
  phonePrimary String
  phonePrimaryType PhoneType
  phoneHome String
  phoneHomeType PhoneType
  phoneMobile String
  phoneMobileType PhoneType
  phoneFax String
}
entity ContactLogEntry {
  date ZonedDateTime
  contactType ContactType
  contactPurpose ContactPurpose
  comment String
}

enum ContactType {
  WEBFORM, PHONE, TEXT, EMAIL, INPERSON, OTHER
}
enum ContactPurpose {
  W_APPLICATION, W_INTERVIEW, W_APPLICATION_DECISION, W_OFFER, W_ASSIGN, W_WITHDRAW, W_OTHER,
	J_CREATE, J_CANCEL, J_PROBLEM
}
enum CommsType {
  PHONE, SMS, EMAIL, INAPPNOTIF, WORKER_PREF
}
enum CommsStatus {
  PENDING, REJ, INPROCESS, SUCCEEDED, FAILED
}
enum CommsCallbackMethod {
  GET, POST
}
entity CommsCmd {
  workerId String
  commType CommsType
  templateName String
  templateVersion String
  templateVars TextBlob
  from String
  sched String
  content TextBlob
  status CommsStatus
}

entity CommsTemplate {
  name String
  version String
  template TextBlob
  templateVars TextBlob
}

entity CommsProvider {
  name String
  commsProviderPhone String
  accountNumber String
}
entity CommsChannelConfig {	
  commsProviderName String
  platform String
  platformCred String
  platformURL String
  callbackURL String
  callbackMethod CommsCallbackMethod
  statusCallbackUrl String
  statusCallbackMethod CommsCallbackMethod
}

relationship OneToMany {
  CommsProvider{channel} to CommsChannelConfig{provider}
}

// common stuff

entity Address {
  street String
  streetLine2 String
  city String
  state StateAbbrev
  zip Integer
}

enum StateAbbrev {
  CA,
  OR,
  WA
}

enum StateNames {
  CALIFORNIA,
  OREGON,
  WASHINGTON
}

enum TimeName {
  NONE, MIDNIGHT, MORNING, NOON, AFTERNOON, EVENING, VARIABLE 	
}

entity TimeWindow {
  name String
  isWorkerTime Boolean // alternative is "Shift" time
  startTime String
  endTime String
  // I guess we could do an Array but that's 24 bytes of overhead, and expensive. So, columns.
  isOnSun Boolean
  isOnMon Boolean
  isOnTu  Boolean
  isOnWed Boolean
  isOnTh  Boolean
  isOnFri Boolean
  isOnSat Boolean
}


// TODO - FUTURE
//
// track worker's individual skill qualities 'good driver'
// entity WorkerSkillRating {}
// relationship OneToMany { Worker to WorkerSkillRating }
//
// tracker Worker, Employer work-together preference
// entity WorkerEmployerPrefs {}
// relationship OneToMany { Worker to WorkerEmployerPrefs, Employer to WorkerEmployerPrefs}
//
// add a UserPrefStateService usvc to hold/restore a User's preferenes and application state
//